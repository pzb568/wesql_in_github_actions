name: 启动 WeSQL 数据库

on:
  workflow_dispatch:

concurrency:
  group: start_wesql_database
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ========== 环境准备阶段 ==========
      - name: 安装必要工具
        run: |
          apt-get update
          apt-get install -y openssh-client lsof

      - name: 配置 AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.R2_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.R2_SECRET_ACCESS_KEY }}
          aws configure set default.region auto

      # ========== 容器管理阶段 ==========
      - name: 清理旧容器
        run: |
          docker stop wesql-server || true
          docker rm wesql-server || true
          docker volume rm wesql-data || true

      - name: 启动 WeSQL 服务器
        id: start_container
        run: |
          # 验证关键环境变量是否设置
          for var in WESQL_ROOT_PASSWORD R2_ACCESS_KEY_ID R2_SECRET_ACCESS_KEY R2_BUCKET_NAME R2_ENDPOINT_URL; do
            if [ -z "${{ secrets[$var] }}" ]; then
              echo "致命错误: $var 未设置！"
              exit 1
            fi
          done

          # 生成 MySQL 配置文件，启用 GTID 和对象存储支持
          cat > mysql_custom.cnf <<EOF
          [mysqld]
          port=3306
          log-bin=binlog
          gtid_mode=ON
          enforce_gtid_consistency=ON
          log_slave_updates=ON
          binlog_format=ROW
          objectstore_provider=aws
          repo_objectstore_id=tutorial
          objectstore_bucket=${{ secrets.R2_BUCKET_NAME }}
          objectstore_region=${{ secrets.R2_REGION }}
          objectstore_endpoint_url=${{ secrets.R2_ENDPOINT_URL }}
          branch_objectstore_id=main
          EOF

          # 启动容器并输出实时日志
          if ! docker run -d \
            --name wesql-server \
            --restart unless-stopped \
            -p 3306:3306 \
            -v wesql-data:/data/mysql \
            -v $(pwd)/mysql_custom.cnf:/etc/mysql/conf.d/custom.cnf \
            -e WESQL_CLUSTER_MEMBER='127.0.0.1:13306' \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.WESQL_ROOT_PASSWORD }} \
            -e WESQL_OBJECTSTORE_ACCESS_KEY=${{ secrets.R2_ACCESS_KEY_ID }} \
            -e WESQL_OBJECTSTORE_SECRET_KEY=${{ secrets.R2_SECRET_ACCESS_KEY }} \
            -e WESQL_OBJECTSTORE_ENDPOINT_URL=${{ secrets.R2_ENDPOINT_URL }} \
            apecloud/wesql-server:8.0.35-0.1.0_beta3.38; then
            echo "错误: 容器启动失败！"
            exit 1
          fi

          # 立即查看启动日志
          echo "========== 初始启动日志 =========="
          docker logs wesql-server --tail 50
          echo "==================================="

      # ========== 健康检查阶段 ==========
      - name: 等待 MySQL 启动 (最大尝试: 5分钟)
        timeout-minutes: 5
        run: |
          attempt=1
          max_attempts=60
          while [ $attempt -le $max_attempts ]; do
            container_status=$(docker inspect -f '{{.State.Status}}' wesql-server)
            if [ "$container_status" != "running" ]; then
              echo "容器状态异常: $container_status"
              docker logs wesql-server
              exit 1
            fi

            if docker exec wesql-server \
              mysqladmin ping -u root -p${{ secrets.WESQL_ROOT_PASSWORD }} --silent; then
              echo "MySQL 成功启动！"
              exit 0
            fi

            if (( $attempt % 6 == 0 )); then
              echo "========== 中间诊断日志 (尝试 $attempt) =========="
              docker logs wesql-server --since 5m
              echo "============================================="
            fi

            echo "等待 MySQL 启动 (尝试 $attempt/$max_attempts)..."
            sleep 5
            ((attempt++))
          done

          echo "错误: MySQL 启动超时！最终日志："
          docker logs wesql-server
          exit 1

      # ========== 网络配置阶段 ==========
      - name: 创建 SSH 隧道
        run: |
          # 确保端口可用
          lsof -ti:3306 | xargs -r kill

          # 建立可靠隧道
          for retry in {1..3}; do
            echo "隧道尝试第 $retry 次..."
            ssh -o ExitOnForwardFailure=yes \
                -o StrictHostKeyChecking=no \
                -fNTR 0:localhost:3306 serveo.net > serveo.log 2>&1
                
            if grep -q "Forwarding TCP" serveo.log; then
              break
            fi
            echo "隧道建立失败，重试中..."
            sleep 10
          done

          # 检查日志文件是否有效
          if [ ! -s serveo.log ] || ! grep -q "Forwarding TCP" serveo.log; then
            echo "错误: 隧道建立失败！日志内容："
            cat serveo.log
            exit 1
          fi

          # 解析连接信息
          TUNNEL_INFO=$(grep -m1 "Forwarding TCP" serveo.log)
          HOST_PORT=$(echo "$TUNNEL_INFO" | awk '{print $NF}')
          echo "公共访问地址: $HOST_PORT"
          echo "HOST_PORT=$HOST_PORT" >> $GITHUB_ENV

      # ========== 信息同步阶段 ==========
      - name: 上传连接信息到 R2
        run: |
          # 生成连接信息文件
          cat <<EOF > connection_info.txt
          [wesql]
          host=$(echo "$HOST_PORT" | cut -d':' -f1)
          port=$(echo "$HOST_PORT" | cut -d':' -f2)
          username=root
          password=${{ secrets.WESQL_ROOT_PASSWORD }}
          mysql_command=mysql -h ${HOST_PORT%:*} -P ${HOST_PORT#*:} -u root -p'${{ secrets.WESQL_ROOT_PASSWORD }}'
          
          # 保持连接存活命令
          while true; do mysqladmin ping -u root -p'${{ secrets.WESQL_ROOT_PASSWORD }}' -h ${HOST_PORT%:*}; sleep 60; done
          EOF

          # 上传并检查错误
          if ! aws s3 cp connection_info.txt s3://${{ secrets.R2_BUCKET_NAME }}/connection_info.txt \
            --endpoint-url ${{ secrets.R2_ENDPOINT_URL }}; then
            echo "错误: 上传连接信息到 R2 失败！"
            exit 1
          fi

      # ========== 维护阶段 ==========
      - name: 保持服务存活
        run: |
          echo "服务正在运行中..."
          echo "调试提示："
          echo "1. 检查容器状态: docker inspect wesql-server"
          echo "2. 实时日志: docker logs -f wesql-server"
          echo "3. MySQL 可用性检查: mysqladmin ping -u root -p'密码'"
          
          # 构建心跳检测机制
          while true; do
            echo "======= 系统状态报告 $(date +%Y-%m-%d\ %H:%M:%S) ======="
            docker stats --no-stream
            free -m
            echo "============================================="
            sleep 3600
          done
